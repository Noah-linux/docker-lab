pipeline {
    agent any
    tools {
        jfrog 'jfrog-cli'
    }
    environment {
        //ncloud.jfrog.io/petclinic
        DOCKER_IMAGE_NAME = "ncloud.jfrog.io/petclinic/petclinic:1.0.0"
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'master', url: "https://github.com/Noah-linux/docker-lab.git"
            }
        }

        stage('Test') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn test' // Unit Test
                }
            }
        }

        stage('Build Package') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn -Dmaven.test.failure.ignore=true clean package' // Build the package without running tests
                }
            }
        }

        stage('Upload Package To Artifactory') {
            steps {
                dir('petclinic-app') {
                    script {
                        def artifactoryUrl = 'https://ncloud.jfrog.io/artifactory/petclinic-generic-local/petclinic.jar'
                        def localJarPath = 'target/*-SNAPSHOT.jar'

                        // Use double quotes to properly inject the variable values //NEWCHANGED
                        jf "rt u '${localJarPath}' '${artifactoryUrl}'"  //NEWCHANGED
                    }
                }
            }
        }

        stage('Build Docker image') {
            steps {
                script {
                    docker.build("$DOCKER_IMAGE_NAME", 'petclinic-app')
                }
            }
        }

        stage('X-ray Scan') {
            steps {
                dir('petclinic-app/') {
                    // Scan Docker image for vulnerabilities
                    jf "docker scan ${DOCKER_IMAGE_NAME}"  //NEWCHANGED
                }
            }
        }

        stage('Push Image To Artifactory') {
            steps {
                dir('petclinic-app/') {
                    // Push Docker image to Artifactory
                    jf "docker push ${DOCKER_IMAGE_NAME}"  //NEWCHANGED
                }
            }
        }

        stage('Publish build info') {
            steps {
                jf 'rt build-publish'
            }
        }
    }

    post {
        success {
            dir('petclinic-app') {
                junit '**/target/surefire-reports/TEST-*.xml' // Archive JUnit test results
                archiveArtifacts 'target/*.jar' // Archive JAR files
            }
        }

        cleanup {
            cleanWs() // Clean up the workspace
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3')) // Keep 3 builds for 1 day
    }
}
