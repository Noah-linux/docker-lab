pipeline {
    agent any
    
    tools {
        maven 'maven3.9.9' // Ensure Maven is installed
    }

    parameters {
        string(name: 'AppPort', defaultValue: '8081', description: 'Port to run the application')
        choice(name: 'DeployEnvironment', choices: ['QA', 'Production'], description: 'Choose environment to deploy')
        string(name: 'NexusURL', defaultValue: 'http://192.168.201.15', description: 'Nexus Repository URL') // Updated Nexus URL
        string(name: 'RepositoryName', defaultValue: 'nexus-jenkins-integration', description: 'Repository name for Docker image')
        string(name: 'ImageName', defaultValue: 'petclinic', description: 'Docker image name')
    }
    
    environment {
        DOCKER_IMAGE_NAME = "${params.ImageName}:${env.BUILD_NUMBER}" // Using build number for Docker image tag
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'patch-1', url: "https://github.com/Noah-linux/docker-lab.git"
            }
        }

        stage('Unit Test') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn test' // Run unit tests
                }
            }
        }

        stage('Build Package') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn -Dmaven.test.failure.ignore=true clean package' // Build the package
                }
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                script {
                    def version = '1.0.0' // Define your version
                    def projectName = 'my-service'

                    nexusArtifactUploader(
                        nexusVersion: 'nexus3', // Corrected version
                        protocol: 'http',
                        nexusUrl: "${params.NexusURL}:8081", // Dynamic Nexus URL
                        groupId: 'org.springframework.samples',
                        version: 2.2.0.BUILD-SNAPSHOT,
                        repository: "${params.RepositoryName}",
                        credentialsId: 'Nexus-Cred',
                        artifacts: [
                            [
                                artifactId: spring-petclinic,
                                classifier: '',
                                file: "spring-petclinic-${version}.jar", // Path to the JAR file
                                type: 'jar'
                            ]
                        ]
                    )
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE_NAME}", 'petclinic-app')
                }
            }
        }

        stage('Push Docker Image to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh """
                    docker login -u ${NEXUS_USER} -p ${NEXUS_PASS} ${params.NexusURL}:8081
                    docker tag ${DOCKER_IMAGE_NAME} ${params.NexusURL}:8081/${params.RepositoryName}/${DOCKER_IMAGE_NAME}
                    docker push ${params.NexusURL}:8081/${params.RepositoryName}/${DOCKER_IMAGE_NAME}
                    """
                }
            }
        }

        stage('Deploy QA | PROD') {
            when {
                expression { params.DeployEnvironment == 'QA' || params.DeployEnvironment == 'Production' }
            }
            steps {
                script {
                    def playbook = params.DeployEnvironment == 'QA' ? 'ansible/deployer/deployer_qa.yml' : 'ansible/deployer/deployer_prod.yml'

                    sh """
                    ansible-playbook -i ansible/deployer/inventory.ini ${playbook} \
                    --extra-vars "NexusURL=${params.NexusURL} DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME} AppPort=${params.AppPort}" \
                    --vault-password-file ansible/deployer/vault_password.txt
                    """
                }
            }
        }
    }

    post {
        success {
            dir('petclinic-app') {
                junit '**/target/surefire-reports/TEST-*.xml' // Archive JUnit test results
                archiveArtifacts 'target/*.jar' // Archive JAR files
            }
        }

        cleanup {
            cleanWs() // Clean up the workspace
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3')) // Keep 3 builds for 1 day
    }
}
